@inject IJSRuntime JSRuntime
@implements IDisposable

<div id="QuillToolBar" @ref="@ToolBar">
    @ToolbarContent
</div>
<div id="QuillEditor" @ref="@QuillElement">
    @EditorContent
</div>

@code {
    [Parameter]
    public RenderFragment EditorContent { get; set; }

    [Parameter]
    public RenderFragment ToolbarContent { get; set; }

    [Parameter]
    public bool ReadOnly { get; set; }
        = false;

    [Parameter]
    public string Placeholder { get; set; }
        = "Compose an epic...";

    [Parameter]
    public string Theme { get; set; }
        = "snow";

    [Parameter]
    public string[] Formats { get; set; }
        = null;

    [Parameter]
    public string DebugLevel { get; set; }
        = "info";

    [Parameter]
    public EventCallback<string> OnTextContentChange { get; set; }

    [Parameter]
    public int MaxLength 
    {
        get => _maxLength;
        set => _maxLength = value <= NO_MAX_LENGTH_VALUE ? 
                    throw new ArgumentOutOfRangeException(
                        nameof(MaxLength), 
                        "MaxLength must be a number greater than zero."
                    ) : 
                    value;
    }

    public string TextContent { get => _textContent; }

    private ElementReference QuillElement;
    private ElementReference ToolBar;
    private DotNetObjectReference<RichTextEditor> _editorReference;
    private string _textContent = string.Empty;
    private const int NO_MAX_LENGTH_VALUE = 0;
    private int _maxLength = NO_MAX_LENGTH_VALUE;

    protected override async Task
        OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _editorReference = DotNetObjectReference.Create(this);

            await Interop.CreateQuill(
                JSRuntime,
                QuillElement,
                ToolBar,
                ReadOnly,
                Placeholder,
                Theme,
                Formats,
                DebugLevel,
                _editorReference);
        }
    }

    [JSInvokable("AddTextContent")]
    public async Task AddTextContent()
    {
        _textContent = await GetText();

        if (_maxLength > NO_MAX_LENGTH_VALUE && _textContent.Length > _maxLength)
        {
            await Interop.DeleteTextContent(
                JSRuntime, QuillElement, _maxLength
            );    
        }

        await OnTextContentChange.InvokeAsync(_textContent);
    }

    public async Task<string> GetText()
    {
        return await Interop.GetText(
            JSRuntime, QuillElement);
    }

    public async Task<string> GetHTML()
    {
        return await Interop.GetHTML(
            JSRuntime, QuillElement);
    }

    public async Task<string> GetContent()
    {
        return await Interop.GetContent(
            JSRuntime, QuillElement);
    }

    public async Task LoadContent(string Content)
    {
        var QuillDelta =
            await Interop.LoadQuillContent(
                JSRuntime, QuillElement, Content);
    }

    public async Task LoadHTMLContent(string quillHTMLContent)
    {
        var QuillDelta =
            await Interop.LoadQuillHTMLContent(
                JSRuntime, QuillElement, quillHTMLContent);
    }

    public async Task InsertImage(string ImageURL)
    {
        var QuillDelta =
            await Interop.InsertQuillImage(
                JSRuntime, QuillElement, ImageURL);
    }

    public async Task InsertText(string text)
    {
        var QuillDelta =
            await Interop.InsertQuillText(
                JSRuntime, QuillElement, text);
    }

    public async Task EnableEditor(bool mode)
    {
        var QuillDelta =
            await Interop.EnableQuillEditor(
                JSRuntime, QuillElement, mode);
    }

    public void Dispose()
    {
        _editorReference?.Dispose();
    }
}